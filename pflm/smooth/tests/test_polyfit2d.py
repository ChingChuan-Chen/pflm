# ruff: noqa: E501
import numpy as np
import pytest
from numpy.testing import assert_allclose

from pflm.smooth.kernel import KernelType
from pflm.smooth.polyfit import polyfit2d


@pytest.mark.parametrize("dtype", [np.float32, np.float64])
def test_polyfit2d(dtype):
    bw1 = 0.15
    bw2 = 0.15
    x = np.linspace(0.0, 1.0, 11, dtype=dtype)
    x1v, x2v = np.meshgrid(x, x)
    x_grid = np.hstack((x2v.ravel(), x1v.ravel())).reshape(2, -1).T
    y = x_grid[:, 0] ** 2 + x_grid[:, 1] ** 2 + 6.0 * x_grid[:, 0] + 6.0 * x_grid[:, 1] + 2.0
    w = np.ones_like(y, dtype=dtype)

    x_new1 = np.linspace(0.0, 1.0, 11, dtype=dtype)
    x_new2 = np.linspace(0.0, 1.0, 11, dtype=dtype)

    # fmt: off
    expected_gaussian = np.array(
        [
            [1.98496411535527, 2.61137618850057, 3.24991383719667, 3.90356223760462, 4.57470940409128, 5.26491695522127, 5.97470940409128, 6.70356223760462, 7.44991383719667, 8.21137618850057, 8.98496411535525],
            [2.61137618850057, 3.23778826164587, 3.87632591034198, 4.52997431074992, 5.20112147723659, 5.89132902836657, 6.60112147723659, 7.32997431074993, 8.07632591034198, 8.83778826164587, 9.61137618850056],
            [3.24991383719667, 3.87632591034198, 4.51486355903809, 5.16851195944603, 5.8396591259327, 6.52986667706269, 7.2396591259327, 7.96851195944604, 8.71486355903809, 9.47632591034198, 10.2499138371967],
            [3.90356223760462, 4.52997431074993, 5.16851195944603, 5.82216035985398, 6.49330752634064, 7.18351507747063, 7.89330752634065, 8.62216035985398, 9.36851195944604, 10.1299743107499, 10.9035622376046],
            [4.57470940409128, 5.20112147723659, 5.8396591259327, 6.49330752634064, 7.1644546928273, 7.85466224395729, 8.56445469282731, 9.29330752634064, 10.0396591259327, 10.8011214772366, 11.5747094040913],
            [5.26491695522127, 5.89132902836657, 6.52986667706268, 7.18351507747063, 7.85466224395729, 8.54486979508727, 9.25466224395729, 9.98351507747063, 10.7298666770627, 11.4913290283666, 12.2649169552213],
            [5.97470940409128, 6.60112147723659, 7.2396591259327, 7.89330752634064, 8.5644546928273, 9.25466224395729, 9.96445469282731, 10.6933075263406, 11.4396591259327, 12.2011214772366, 12.9747094040913],
            [6.70356223760462, 7.32997431074993, 7.96851195944603, 8.62216035985398, 9.29330752634064, 9.98351507747063, 10.6933075263406, 11.422160359854, 12.168511959446, 12.9299743107499, 13.7035622376046],
            [7.44991383719668, 8.07632591034198, 8.71486355903808, 9.36851195944603, 10.0396591259327, 10.7298666770627, 11.4396591259327, 12.168511959446, 12.9148635590381, 13.676325910342, 14.4499138371967],
            [8.21137618850057, 8.83778826164588, 9.47632591034198, 10.1299743107499, 10.8011214772366, 11.4913290283666, 12.2011214772366, 12.9299743107499, 13.676325910342, 14.4377882616459, 15.2113761885006],
            [8.98496411535527, 9.61137618850058, 10.2499138371967, 10.9035622376046, 11.5747094040913, 12.2649169552213, 12.9747094040913, 13.7035622376046, 14.4499138371967, 15.2113761885006, 15.9849641153553],
        ]
    )
    expected_logistic = np.array(
        [
            [1.92138403575896, 2.56976002587655, 3.22502796596351, 3.89060105884695, 4.56898605484621, 5.26162658917806, 5.9689860548462, 6.69060105884694, 7.4250279659635, 8.16976002587656, 8.92138403575897],
            [2.56976002587655, 3.21813601599413, 3.87340395608109, 4.53897704896453, 5.21736204496379, 5.91000257929565, 6.61736204496379, 7.33897704896453, 8.07340395608108, 8.81813601599412, 9.56976002587656],
            [3.22502796596351, 3.87340395608109, 4.52867189616805, 5.1942449890515, 5.87262998505076, 6.56527051938261, 7.27262998505076, 7.9942449890515, 8.72867189616805, 9.47340395608109, 10.2250279659635],
            [3.89060105884696, 4.53897704896454, 5.1942449890515, 5.85981808193495, 6.53820307793421, 7.23084361226606, 7.9382030779342, 8.65981808193495, 9.3942449890515, 10.1389770489645, 10.8906010588469],
            [4.56898605484622, 5.2173620449638, 5.87262998505076, 6.53820307793421, 7.21658807393347, 7.90922860826532, 8.61658807393347, 9.33820307793421, 10.0726299850508, 10.8173620449638, 11.5689860548462],
            [5.26162658917807, 5.91000257929565, 6.56527051938261, 7.23084361226606, 7.90922860826532, 8.60186914259717, 9.30922860826532, 10.0308436122661, 10.7652705193826, 11.5100025792957, 12.2616265891781],
            [5.96898605484622, 6.6173620449638, 7.27262998505076, 7.93820307793421, 8.61658807393347, 9.30922860826532, 10.0165880739335, 10.7382030779342, 11.4726299850508, 12.2173620449638, 12.9689860548462],
            [6.69060105884696, 7.33897704896454, 7.9942449890515, 8.65981808193495, 9.33820307793421, 10.0308436122661, 10.7382030779342, 11.459818081935, 12.1942449890515, 12.9389770489645, 13.690601058847],
            [7.42502796596351, 8.07340395608109, 8.72867189616806, 9.3942449890515, 10.0726299850508, 10.7652705193826, 11.4726299850508, 12.1942449890515, 12.9286718961681, 13.6734039560811, 14.4250279659635],
            [8.16976002587655, 8.81813601599413, 9.47340395608109, 10.1389770489645, 10.8173620449638, 11.5100025792957, 12.2173620449638, 12.9389770489645, 13.6734039560811, 14.4181360159941, 15.1697600258766],
            [8.92138403575898, 9.56976002587655, 10.2250279659635, 10.890601058847, 11.5689860548462, 12.2616265891781, 12.9689860548462, 13.690601058847, 14.4250279659635, 15.1697600258766, 15.921384035759],
        ],
        dtype=dtype
    )
    expected_sigmoid = np.array(
        [
            [1.9405441902563, 2.58322950460427, 3.23221789493025, 3.89307865135335, 4.56872414141014, 5.26047868337069, 5.96872414141014, 6.69307865135335, 7.43221789493024, 8.18322950460426, 8.94054419025629],
            [2.58322950460427, 3.22591481895223, 3.87490320927821, 4.53576396570131, 5.2114094557581, 5.90316399771866, 6.6114094557581, 7.33576396570132, 8.07490320927821, 8.82591481895224, 9.58322950460426],
            [3.23221789493025, 3.87490320927821, 4.52389159960419, 5.18475235602729, 5.86039784608408, 6.55215238804464, 7.26039784608408, 7.98475235602729, 8.72389159960419, 9.47490320927821, 10.2322178949303],
            [3.89307865135335, 4.53576396570131, 5.18475235602729, 5.84561311245039, 6.52125860250719, 7.21301314446774, 7.92125860250718, 8.64561311245039, 9.38475235602729, 10.1357639657013, 10.8930786513534],
            [4.56872414141014, 5.2114094557581, 5.86039784608408, 6.52125860250718, 7.19690409256398, 7.88865863452453, 8.59690409256398, 9.32125860250718, 10.0603978460841, 10.8114094557581, 11.5687241414101],
            [5.26047868337069, 5.90316399771866, 6.55215238804463, 7.21301314446774, 7.88865863452454, 8.58041317648509, 9.28865863452453, 10.0130131444677, 10.7521523880446, 11.5031639977187, 12.2604786833707],
            [5.96872414141014, 6.6114094557581, 7.26039784608408, 7.92125860250718, 8.59690409256398, 9.28865863452453, 9.99690409256397, 10.7212586025072, 11.4603978460841, 12.2114094557581, 12.9687241414101],
            [6.69307865135335, 7.33576396570131, 7.98475235602729, 8.64561311245039, 9.32125860250719, 10.0130131444677, 10.7212586025072, 11.4456131124504, 12.1847523560273, 12.9357639657013, 13.6930786513533],
            [7.43221789493025, 8.0749032092782, 8.72389159960419, 9.38475235602729, 10.0603978460841, 10.7521523880446, 11.4603978460841, 12.1847523560273, 12.9238915996042, 13.6749032092782, 14.4322178949302],
            [8.18322950460427, 8.82591481895223, 9.47490320927821, 10.1357639657013, 10.8114094557581, 11.5031639977187, 12.2114094557581, 12.9357639657013, 13.6749032092782, 14.4259148189522, 15.1832295046043],
            [8.9405441902563, 9.58322950460427, 10.2322178949302, 10.8930786513533, 11.5687241414101, 12.2604786833707, 12.9687241414101, 13.6930786513533, 14.4322178949303, 15.1832295046043, 15.9405441902563],
        ],
        dtype=dtype
    )

    expected_rectangular = np.array(
        [
            [2, 2.61666666666667, 3.24666666666667, 3.89666666666667, 4.56666666666667, 5.25666666666667, 5.96666666666667, 6.69666666666667, 7.44666666666667, 8.21666666666667, 9],
            [2.61666666666667, 3.23333333333333, 3.86333333333333, 4.51333333333333, 5.18333333333333, 5.87333333333333, 6.58333333333333, 7.31333333333333, 8.06333333333333, 8.83333333333333, 9.61666666666667],
            [3.24666666666667, 3.86333333333333, 4.49333333333333, 5.14333333333333, 5.81333333333333, 6.50333333333333, 7.21333333333333, 7.94333333333333, 8.69333333333334, 9.46333333333333, 10.2466666666667],
            [3.89666666666667, 4.51333333333333, 5.14333333333333, 5.79333333333333, 6.46333333333333, 7.15333333333333, 7.86333333333333, 8.59333333333333, 9.34333333333333, 10.1133333333333, 10.8966666666667],
            [4.56666666666667, 5.18333333333333, 5.81333333333333, 6.46333333333333, 7.13333333333333, 7.82333333333333, 8.53333333333333, 9.26333333333333, 10.0133333333333, 10.7833333333333, 11.5666666666667],
            [5.25666666666667, 5.87333333333333, 6.50333333333333, 7.15333333333333, 7.82333333333333, 8.51333333333334, 9.22333333333334, 9.95333333333333, 10.7033333333333, 11.4733333333333, 12.2566666666667],
            [5.96666666666667, 6.58333333333333, 7.21333333333333, 7.86333333333333, 8.53333333333333, 9.22333333333334, 9.93333333333333, 10.6633333333333, 11.4133333333333, 12.1833333333333, 12.9666666666667],
            [6.69666666666667, 7.31333333333333, 7.94333333333333, 8.59333333333333, 9.26333333333333, 9.95333333333333, 10.6633333333333, 11.3933333333333, 12.1433333333333, 12.9133333333333, 13.6966666666667],
            [7.44666666666667, 8.06333333333333, 8.69333333333334, 9.34333333333333, 10.0133333333333, 10.7033333333333, 11.4133333333333, 12.1433333333333, 12.8933333333333, 13.6633333333333, 14.4466666666667],
            [8.21666666666667, 8.83333333333333, 9.46333333333333, 10.1133333333333, 10.7833333333333, 11.4733333333333, 12.1833333333333, 12.9133333333333, 13.6633333333333, 14.4333333333333, 15.2166666666667],
            [9, 9.61666666666667, 10.2466666666667, 10.8966666666667, 11.5666666666667, 12.2566666666667, 12.9666666666667, 13.6966666666667, 14.4466666666667, 15.2166666666667, 16],
        ],
        dtype=dtype
    )

    expected_triangular = np.array(
        [
            [2, 2.614, 3.244, 3.894, 4.564, 5.254, 5.964, 6.694, 7.444, 8.214, 9],
            [2.614, 3.228, 3.858, 4.508, 5.178, 5.868, 6.578, 7.308, 8.058, 8.828, 9.614],
            [3.244, 3.858, 4.488, 5.138, 5.808, 6.498, 7.208, 7.938, 8.688, 9.458, 10.244],
            [3.894, 4.508, 5.138, 5.788, 6.458, 7.148, 7.858, 8.588, 9.338, 10.108, 10.894],
            [4.564, 5.178, 5.808, 6.458, 7.128, 7.818, 8.528, 9.258, 10.008, 10.778, 11.564],
            [5.254, 5.868, 6.498, 7.148, 7.818, 8.508, 9.218, 9.948, 10.698, 11.468, 12.254],
            [5.964, 6.578, 7.208, 7.858, 8.528, 9.218, 9.928, 10.658, 11.408, 12.178, 12.964],
            [6.694, 7.308, 7.938, 8.588, 9.258, 9.948, 10.658, 11.388, 12.138, 12.908, 13.694],
            [7.444, 8.058, 8.688, 9.338, 10.008, 10.698, 11.408, 12.138, 12.888, 13.658, 14.444],
            [8.214, 8.828, 9.458, 10.108, 10.778, 11.468, 12.178, 12.908, 13.658, 14.428, 15.214],
            [9, 9.614, 10.244, 10.894, 11.564, 12.254, 12.964, 13.694, 14.444, 15.214, 16],
        ],
        dtype=dtype
    )
    expected_epanechnikov = np.array(
        [
            [2, 2.61526315789474, 3.24526315789474, 3.89526315789474, 4.56526315789474, 5.25526315789474, 5.96526315789474, 6.69526315789474, 7.44526315789474, 8.21526315789474, 9],
            [2.61526315789474, 3.23052631578947, 3.86052631578947, 4.51052631578948, 5.18052631578947, 5.87052631578947, 6.58052631578947, 7.31052631578947, 8.06052631578947, 8.83052631578948, 9.61526315789474],
            [3.24526315789474, 3.86052631578947, 4.49052631578947, 5.14052631578947, 5.81052631578947, 6.50052631578948, 7.21052631578947, 7.94052631578948, 8.69052631578947, 9.46052631578948, 10.2452631578947],
            [3.89526315789474, 4.51052631578948, 5.14052631578947, 5.79052631578948, 6.46052631578948, 7.15052631578947, 7.86052631578948, 8.59052631578948, 9.34052631578948, 10.1105263157895, 10.8952631578947],
            [4.56526315789474, 5.18052631578947, 5.81052631578947, 6.46052631578948, 7.13052631578947, 7.82052631578948, 8.53052631578948, 9.26052631578947, 10.0105263157895, 10.7805263157895, 11.5652631578947],
            [5.25526315789474, 5.87052631578947, 6.50052631578947, 7.15052631578947, 7.82052631578947, 8.51052631578948, 9.22052631578948, 9.95052631578948, 10.7005263157895, 11.4705263157895, 12.2552631578947],
            [5.96526315789474, 6.58052631578947, 7.21052631578948, 7.86052631578947, 8.53052631578948, 9.22052631578948, 9.93052631578948, 10.6605263157895, 11.4105263157895, 12.1805263157895, 12.9652631578947],
            [6.69526315789474, 7.31052631578947, 7.94052631578947, 8.59052631578948, 9.26052631578947, 9.95052631578948, 10.6605263157895, 11.3905263157895, 12.1405263157895, 12.9105263157895, 13.6952631578947],
            [7.44526315789474, 8.06052631578947, 8.69052631578947, 9.34052631578948, 10.0105263157895, 10.7005263157895, 11.4105263157895, 12.1405263157895, 12.8905263157895, 13.6605263157895, 14.4452631578947],
            [8.21526315789474, 8.83052631578948, 9.46052631578947, 10.1105263157895, 10.7805263157895, 11.4705263157895, 12.1805263157895, 12.9105263157895, 13.6605263157895, 14.4305263157895, 15.2152631578947],
            [9, 9.61526315789474, 10.2452631578947, 10.8952631578947, 11.5652631578947, 12.2552631578947, 12.9652631578947, 13.6952631578947, 14.4452631578947, 15.2152631578947, 16],
        ],
        dtype=dtype
    )
    expected_biweight = np.array(
        [
            [2, 2.61381679389313, 3.24381679389313, 3.89381679389313, 4.56381679389313, 5.25381679389313, 5.96381679389313, 6.69381679389313, 7.44381679389313, 8.21381679389313, 9],
            [2.61381679389313, 3.22763358778626, 3.85763358778626, 4.50763358778626, 5.17763358778626, 5.86763358778626, 6.57763358778626, 7.30763358778626, 8.05763358778626, 8.82763358778626, 9.61381679389313],
            [3.24381679389313, 3.85763358778626, 4.48763358778626, 5.13763358778626, 5.80763358778626, 6.49763358778626, 7.20763358778626, 7.93763358778626, 8.68763358778626, 9.45763358778626, 10.2438167938931],
            [3.89381679389313, 4.50763358778626, 5.13763358778626, 5.78763358778626, 6.45763358778626, 7.14763358778626, 7.85763358778626, 8.58763358778626, 9.33763358778626, 10.1076335877863, 10.8938167938931],
            [4.56381679389313, 5.17763358778626, 5.80763358778626, 6.45763358778626, 7.12763358778626, 7.81763358778626, 8.52763358778626, 9.25763358778626, 10.0076335877863, 10.7776335877863, 11.5638167938931],
            [5.25381679389313, 5.86763358778626, 6.49763358778626, 7.14763358778626, 7.81763358778626, 8.50763358778626, 9.21763358778626, 9.94763358778626, 10.6976335877863, 11.4676335877863, 12.2538167938931],
            [5.96381679389313, 6.57763358778626, 7.20763358778626, 7.85763358778626, 8.52763358778626, 9.21763358778626, 9.92763358778626, 10.6576335877863, 11.4076335877863, 12.1776335877863, 12.9638167938931],
            [6.69381679389313, 7.30763358778626, 7.93763358778626, 8.58763358778626, 9.25763358778626, 9.94763358778626, 10.6576335877863, 11.3876335877863, 12.1376335877863, 12.9076335877863, 13.6938167938931],
            [7.44381679389313, 8.05763358778626, 8.68763358778626, 9.33763358778626, 10.0076335877863, 10.6976335877863, 11.4076335877863, 12.1376335877863, 12.8876335877863, 13.6576335877863, 14.4438167938931],
            [8.21381679389313, 8.82763358778626, 9.45763358778626, 10.1076335877863, 10.7776335877863, 11.4676335877863, 12.1776335877863, 12.9076335877863, 13.6576335877863, 14.4276335877863, 15.2138167938931],
            [9, 9.61381679389313, 10.2438167938931, 10.8938167938931, 11.5638167938931, 12.2538167938931, 12.9638167938931, 13.6938167938931, 14.4438167938931, 15.2138167938931, 16],
        ],
        dtype=dtype
    )
    expected_triweight = np.array(
        [
            [2, 2.61255362614913, 3.24255362614913, 3.89255362614913, 4.56255362614913, 5.25255362614913, 5.96255362614913, 6.69255362614913, 7.44255362614913, 8.21255362614913, 9],
            [2.61255362614913, 3.22510725229826, 3.85510725229826, 4.50510725229826, 5.17510725229826, 5.86510725229826, 6.57510725229826, 7.30510725229826, 8.05510725229826, 8.82510725229826, 9.61255362614913],
            [3.24255362614913, 3.85510725229826, 4.48510725229826, 5.13510725229826, 5.80510725229826, 6.49510725229826, 7.20510725229826, 7.93510725229826, 8.68510725229826, 9.45510725229826, 10.2425536261491],
            [3.89255362614913, 4.50510725229826, 5.13510725229826, 5.78510725229826, 6.45510725229826, 7.14510725229826, 7.85510725229826, 8.58510725229826, 9.33510725229826, 10.1051072522983, 10.8925536261491],
            [4.56255362614913, 5.17510725229826, 5.80510725229826, 6.45510725229826, 7.12510725229826, 7.81510725229826, 8.52510725229826, 9.25510725229826, 10.0051072522983, 10.7751072522983, 11.5625536261491],
            [5.25255362614913, 5.86510725229826, 6.49510725229826, 7.14510725229826, 7.81510725229826, 8.50510725229826, 9.21510725229827, 9.94510725229826, 10.6951072522983, 11.4651072522983, 12.2525536261491],
            [5.96255362614913, 6.57510725229826, 7.20510725229826, 7.85510725229826, 8.52510725229827, 9.21510725229826, 9.92510725229826, 10.6551072522983, 11.4051072522983, 12.1751072522983, 12.9625536261491],
            [6.69255362614913, 7.30510725229826, 7.93510725229826, 8.58510725229826, 9.25510725229826, 9.94510725229826, 10.6551072522983, 11.3851072522983, 12.1351072522983, 12.9051072522983, 13.6925536261491],
            [7.44255362614913, 8.05510725229826, 8.68510725229826, 9.33510725229826, 10.0051072522983, 10.6951072522983, 11.4051072522983, 12.1351072522983, 12.8851072522983, 13.6551072522983, 14.4425536261491],
            [8.21255362614913, 8.82510725229826, 9.45510725229826, 10.1051072522983, 10.7751072522983, 11.4651072522983, 12.1751072522983, 12.9051072522983, 13.6551072522983, 14.4251072522983, 15.2125536261491],
            [9, 9.61255362614913, 10.2425536261491, 10.8925536261491, 11.5625536261491, 12.2525536261491, 12.9625536261491, 13.6925536261491, 14.4425536261491, 15.2125536261491, 16],
        ],
        dtype=dtype
    )
    expected_tricube = np.array(
        [
            [2, 2.61410706266279, 3.2441070626628, 3.89410706266279, 4.5641070626628, 5.25410706266279, 5.9641070626628, 6.69410706266279, 7.4441070626628, 8.21410706266279, 9],
            [2.61410706266279, 3.22821412532559, 3.85821412532559, 4.50821412532559, 5.17821412532559, 5.86821412532559, 6.57821412532559, 7.30821412532559, 8.05821412532559, 8.82821412532559, 9.61410706266279],
            [3.2441070626628, 3.85821412532559, 4.48821412532559, 5.13821412532559, 5.80821412532559, 6.49821412532559, 7.20821412532559, 7.93821412532559, 8.68821412532559, 9.45821412532559, 10.2441070626628],
            [3.8941070626628, 4.50821412532559, 5.13821412532559, 5.78821412532559, 6.45821412532559, 7.14821412532559, 7.85821412532559, 8.58821412532559, 9.33821412532559, 10.1082141253256, 10.8941070626628],
            [4.5641070626628, 5.17821412532559, 5.80821412532559, 6.45821412532559, 7.12821412532559, 7.81821412532559, 8.52821412532559, 9.25821412532559, 10.0082141253256, 10.7782141253256, 11.5641070626628],
            [5.2541070626628, 5.86821412532559, 6.49821412532559, 7.14821412532559, 7.81821412532559, 8.50821412532559, 9.21821412532559, 9.94821412532559, 10.6982141253256, 11.4682141253256, 12.2541070626628],
            [5.96410706266279, 6.57821412532559, 7.20821412532559, 7.85821412532559, 8.52821412532559, 9.21821412532559, 9.92821412532559, 10.6582141253256, 11.4082141253256, 12.1782141253256, 12.9641070626628],
            [6.6941070626628, 7.30821412532559, 7.93821412532559, 8.58821412532559, 9.25821412532559, 9.94821412532559, 10.6582141253256, 11.3882141253256, 12.1382141253256, 12.9082141253256, 13.6941070626628],
            [7.4441070626628, 8.05821412532559, 8.68821412532559, 9.33821412532559, 10.0082141253256, 10.6982141253256, 11.4082141253256, 12.1382141253256, 12.8882141253256, 13.6582141253256, 14.4441070626628],
            [8.21410706266279, 8.82821412532559, 9.45821412532559, 10.1082141253256, 10.7782141253256, 11.4682141253256, 12.1782141253256, 12.9082141253256, 13.6582141253256, 14.4282141253256, 15.2141070626628],
            [9, 9.61410706266279, 10.2441070626628, 10.8941070626628, 11.5641070626628, 12.2541070626628, 12.9641070626628, 13.6941070626628, 14.4441070626628, 15.2141070626628, 16],
        ],
        dtype=dtype
    )
    expected_cosine = np.array(
        [
            [2, 2.615, 3.245, 3.895, 4.565, 5.255, 5.965, 6.695, 7.445, 8.215, 9],
            [2.615, 3.23, 3.86, 4.51, 5.18, 5.87, 6.58, 7.31, 8.06, 8.83, 9.615],
            [3.245, 3.86, 4.49, 5.14, 5.81, 6.5, 7.21, 7.94, 8.69, 9.46, 10.245],
            [3.895, 4.51, 5.14, 5.79, 6.46, 7.15, 7.86, 8.59, 9.34, 10.11, 10.895],
            [4.565, 5.18, 5.81, 6.46, 7.13, 7.82, 8.53, 9.26, 10.01, 10.78, 11.565],
            [5.255, 5.87, 6.5, 7.15, 7.82, 8.51, 9.22, 9.95, 10.7, 11.47, 12.255],
            [5.965, 6.58, 7.21, 7.86, 8.53, 9.22, 9.93, 10.66, 11.41, 12.18, 12.965],
            [6.695, 7.31, 7.94, 8.59, 9.26, 9.95, 10.66, 11.39, 12.14, 12.91, 13.695],
            [7.445, 8.06, 8.69, 9.34, 10.01, 10.7, 11.41, 12.14, 12.89, 13.66, 14.445],
            [8.215, 8.83, 9.46, 10.11, 10.78, 11.47, 12.18, 12.91, 13.66, 14.43, 15.215],
            [9.00000000000001, 9.615, 10.245, 10.895, 11.565, 12.255, 12.965, 13.695, 14.445, 15.215, 16],
        ],
        dtype=dtype
    )

    # fmt: on
    assert_allclose(polyfit2d(x_grid, y, w, x_new1, x_new2, bw1, bw2, KernelType.GAUSSIAN), expected_gaussian, rtol=1e-5, atol=1e-6)
    assert_allclose(polyfit2d(x_grid, y, w, x_new1, x_new2, bw1, bw2, KernelType.LOGISTIC), expected_logistic, rtol=1e-5, atol=1e-6)
    assert_allclose(polyfit2d(x_grid, y, w, x_new1, x_new2, bw1, bw2, KernelType.SIGMOID), expected_sigmoid, rtol=1e-5, atol=1e-6)
    assert_allclose(polyfit2d(x_grid, y, w, x_new1, x_new2, bw1, bw2, KernelType.RECTANGULAR), expected_rectangular, rtol=1e-5, atol=1e-6)
    assert_allclose(polyfit2d(x_grid, y, w, x_new1, x_new2, bw1, bw2, KernelType.TRIANGULAR), expected_triangular, rtol=1e-5, atol=1e-6)
    assert_allclose(polyfit2d(x_grid, y, w, x_new1, x_new2, bw1, bw2, KernelType.EPANECHNIKOV), expected_epanechnikov, rtol=1e-5, atol=1e-6)
    assert_allclose(polyfit2d(x_grid, y, w, x_new1, x_new2, bw1, bw2, KernelType.BIWEIGHT), expected_biweight, rtol=1e-5, atol=1e-6)
    assert_allclose(polyfit2d(x_grid, y, w, x_new1, x_new2, bw1, bw2, KernelType.TRIWEIGHT), expected_triweight, rtol=1e-5, atol=1e-6)
    assert_allclose(polyfit2d(x_grid, y, w, x_new1, x_new2, bw1, bw2, KernelType.TRICUBE), expected_tricube, rtol=1e-5, atol=1e-6)
    assert_allclose(polyfit2d(x_grid, y, w, x_new1, x_new2, bw1, bw2, KernelType.COSINE), expected_cosine, rtol=1e-5, atol=1e-6)


def make_valid_inputs(dtype=np.float64):
    x_grid = np.zeros((2, 2), dtype=dtype)
    y = np.zeros(2, dtype=dtype)
    w = np.zeros(2, dtype=dtype)
    x_new1 = np.array([0.1, 0.2], dtype=dtype)
    x_new2 = np.array([0.1, 0.2], dtype=dtype)
    return x_grid, y, w, x_new1, x_new2


def test_polyfit2d_x_grid_not_2d():
    x_grid = np.zeros(2)
    y = np.zeros(2)
    w = np.zeros(2)
    x_new1 = np.array([0.1, 0.2])
    x_new2 = np.array([0.1, 0.2])
    with pytest.raises(ValueError, match="x_grid must be a 2D array."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 1.0)


def test_polyfit2d_y_not_1d():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    y = np.zeros((2, 2))
    with pytest.raises(ValueError, match="y must be a 1D array."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 1.0)


def test_polyfit2d_w_not_1d():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    w = np.zeros((2, 2))
    with pytest.raises(ValueError, match="w must be a 1D array."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 1.0)


def test_polyfit2d_x_grid_y_size_mismatch():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    y = np.zeros(3)
    with pytest.raises(ValueError, match="y must have the same size as the first dimension of x_grid."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 1.0)


def test_polyfit2d_y_size_w_size_mismatch():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    w = np.zeros(3)
    with pytest.raises(ValueError, match="w must have the same size as y."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 1.0)


def test_polyfit2d_w_negative():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    w = np.array([1.0, -1.0])
    with pytest.raises(ValueError, match="All weights in w must be greater than 0."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 1.0)


def test_polyfit2d_x_new_not_1d():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    x_new1 = np.zeros((2, 2))
    with pytest.raises(ValueError, match="x_new1 and x_new2 must be 1D arrays."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 1.0)


def test_polyfit2d_x_new_empty():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    x_new1 = np.array([])
    with pytest.raises(ValueError, match="x_new1 and x_new2 must not be empty."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 1.0)


def test_polyfit2d_bandwidth_non_positive():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    with pytest.raises(ValueError, match="Bandwidths, bandwidth1 and bandwidth2, should be positive."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 0.0, 1.0)
    with pytest.raises(ValueError, match="Bandwidths, bandwidth1 and bandwidth2, should be positive."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 0.0)


def test_polyfit2d_kernel_type_invalid():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()

    class Dummy:
        value = 999

    with pytest.raises(ValueError, match="kernel must be one of"):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 1.0, Dummy())


def test_polyfit2d_degree_non_positive():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    with pytest.raises(ValueError, match="Degree of polynomial, degree, should be positive."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 0.1, 1.0, KernelType.GAUSSIAN, 0)


def test_polyfit2d_deriv1_negative():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    with pytest.raises(ValueError, match="Order of derivative, deriv1, should be positive."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 0.1, 1.0, KernelType.GAUSSIAN, 1, -1)


def test_polyfit2d_deriv2_negative():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    with pytest.raises(ValueError, match="Order of derivative, deriv2, should be positive."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 0.1, 1.0, KernelType.GAUSSIAN, 1, 0, -1)


def test_polyfit2d_degree_less_than_sum_of_deriv1_deriv2():
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    with pytest.raises(ValueError, match="Degree of polynomial, degree, should be greater than or equal to the sum of orders of derivatives, deriv1 and deriv2."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 0.1, 1.0, KernelType.GAUSSIAN, 1, 2)


@pytest.mark.parametrize("dtype", [np.float32, np.float64])
def test_polyfit2d_nan_inputs(dtype):
    x_grid = np.zeros((2, 2), dtype=dtype)
    y = np.zeros(2, dtype=dtype)
    w = np.ones(2, dtype=dtype)
    x_new1 = np.array([0.1, 0.2], dtype=dtype)
    x_new2 = np.array([0.1, 0.2], dtype=dtype)

    # x_grid contains NaN
    x_grid_nan = x_grid.copy()
    x_grid_nan[0, 0] = np.nan
    with pytest.raises(ValueError, match="Input array x_grid contains NaN values."):
        polyfit2d(x_grid_nan, y, w, x_new1, x_new2, 1.0, 1.0, KernelType.GAUSSIAN)

    # y contains NaN
    y_nan = y.copy()
    y_nan[1] = np.nan
    with pytest.raises(ValueError, match="Input array y contains NaN values."):
        polyfit2d(x_grid, y_nan, w, x_new1, x_new2, 1.0, 1.0, KernelType.GAUSSIAN)

    # w contains NaN
    w_nan = w.copy()
    w_nan[0] = np.nan
    with pytest.raises(ValueError, match="Input array w contains NaN values."):
        polyfit2d(x_grid, y, w_nan, x_new1, x_new2, 1.0, 1.0, KernelType.GAUSSIAN)

    # x_new1 contains NaN
    x_new1_nan = x_new1.copy()
    x_new1_nan[1] = np.nan
    with pytest.raises(ValueError, match="Input array x_new1 contains NaN values."):
        polyfit2d(x_grid, y, w, x_new1_nan, x_new2, 1.0, 1.0, KernelType.GAUSSIAN)

    # x_new2 contains NaN
    x_new2_nan = x_new2.copy()
    x_new2_nan[0] = np.nan
    with pytest.raises(ValueError, match="Input array x_new2 contains NaN values."):
        polyfit2d(x_grid, y, w, x_new1, x_new2_nan, 1.0, 1.0, KernelType.GAUSSIAN)


@pytest.mark.parametrize("bad_type", [float('nan'), np.nan])
def test_polyfit2d_bandwidths_nan(bad_type):
    x_grid, y, w, x_new1, x_new2 = make_valid_inputs()
    with pytest.raises(ValueError, match="Bandwidths, bandwidth1 and bandwidth2, should not be NaN."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, bad_type, 1.0, KernelType.GAUSSIAN)
    with pytest.raises(ValueError, match="Bandwidths, bandwidth1 and bandwidth2, should not be NaN."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, bad_type, KernelType.GAUSSIAN)


@pytest.mark.parametrize("bad_type", ["2", None, [1], (2,), {"a": 1}])
def test_polyfit2d_bandwidth_non_int_type(bad_type):
    x_grid = np.zeros((2, 2))
    y = np.zeros(2)
    w = np.ones(2)
    x_new1 = np.array([0.1, 0.2])
    x_new2 = np.array([0.1, 0.2])
    with pytest.raises(TypeError, match="Bandwidth, bandwidth1, should not be None and must be a float or int."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, bad_type, 1.0, KernelType.GAUSSIAN)
    with pytest.raises(TypeError, match="Bandwidth, bandwidth2, should not be None and must be a float or int."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, bad_type, KernelType.GAUSSIAN)


@pytest.mark.parametrize("bad_type", [1.5, "2", None, float('nan'), np.nan, [1], (2,), {"a": 1}])
def test_polyfit2d_degree_non_int_type(bad_type):
    x_grid = np.zeros((2, 2))
    y = np.zeros(2)
    w = np.ones(2)
    x_new1 = np.array([0.1, 0.2])
    x_new2 = np.array([0.1, 0.2])
    with pytest.raises(TypeError, match="Degree of polynomial, degree, should not be None and must be an integer."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 1.0, KernelType.GAUSSIAN, bad_type, 0, 0)


@pytest.mark.parametrize("bad_type", [1.5, "2", None, float('nan'), np.nan, [1], (2,), {"a": 1}])
def test_polyfit2d_deriv1_non_int_type(bad_type):
    x_grid = np.zeros((2, 2))
    y = np.zeros(2)
    w = np.ones(2)
    x_new1 = np.array([0.1, 0.2])
    x_new2 = np.array([0.1, 0.2])
    with pytest.raises(TypeError, match="Order of derivative, deriv1, should not be None and must be an integer."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 1.0, KernelType.GAUSSIAN, 2, bad_type, 0)


@pytest.mark.parametrize("bad_type", [1.5, "2", None, float('nan'), np.nan, [1], (2,), {"a": 1}])
def test_polyfit2d_deriv2_non_int_type(bad_type):
    x_grid = np.zeros((2, 2))
    y = np.zeros(2)
    w = np.ones(2)
    x_new1 = np.array([0.1, 0.2])
    x_new2 = np.array([0.1, 0.2])
    with pytest.raises(TypeError, match="Order of derivative, deriv2, should not be None and must be an integer."):
        polyfit2d(x_grid, y, w, x_new1, x_new2, 1.0, 1.0, KernelType.GAUSSIAN, 2, 0, bad_type)
